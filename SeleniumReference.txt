Selenium
reference: https://www.guru99.com/first-webdriver-script.html
just some tiny arrows → → → → →

Locating by DOM (Document Object Model):
	Will be uisng developer options in Chrome [right click → "Inspect"]
	can also use Firebug and XPath
	XPath:
		language used when locating XML nodes. Since HTML can be thought of as an implmentation of XML, we can also use XPath in locating HTML elements
		Advantages: it can access almost any element, even those without class, name, or id attributes
		Disadvantages: It is the most complicated method of identifying elementsbecause of too many different rules and considerations
		Firebug can automatically gernerate XPath locators. In the following example, we will access an image that cannot possibly be accessed through the methods we discussed earlier
	Four basic ways to locate an element through DOM:
		getElementById:
			It will only get one element for you
			That element bear the ID that you specified inside the parentheses of getElementById()
			document.getElementById("id of the element") : id of the element = this is the value of the ID attribute of the element to be accessed, specified inside parentheses
			Steps [inly works on chrome, need add-ons to do thi in firefox]:
				1. navigate to page and find element to get id of
				2. right click on it and select "Inspect"
				3. window that opens up has all info on that is related to that element, id should be in there
		
		getElementsByName():
			It will get a collection of elements whose names are all the same
			Each element is indexed with a number starting from 0 just like an array
			You specify which element you wish to access by putting its index number into the square brackets in getElementsByName's syntax
			Similar syntax as getElementById → document.getelementsByName("name of the elements")
			Same steps for getting name as it is for ID
			
		dom:name():
			this method will only apply if the element you are accessing is contained within a named form
			document.forms["name of the form"].elements["name of the element"]
				name of the form = the value of the name attribute of the form tag that contains the element you want to access
				name of the element = the value of the name attribute of the element you wish to access
			to find form name, follow same instructions as looking for ID, but instead look at the confining elements and "form name" should be there
		
		dom:index():
			this method applies even when the element is not within a named form because it uses the form's index and not its name
			document.forms[index of the form].elements[index of the element]
				index of the form = index number (starting at 0) of the form with respect to the whole page
				index of the element = the index number (starting at 0) of the lemenet with respect to the whole form that contains it
			same way of getting necessary info as previous ones but:
				ex. no name and id attributes, if it is the only form on the page the its index will be 0
					will need to count number fo inputs in form to get "element index"
		_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
		|							|									|								|
		|			Method			|			Target Syntax			|			Example				|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|	By ID					|	id = id_of_the_element			|		id = email				|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|	By Name			  		|	name = name_of_the_element		|		name = userName			|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|	By Name Using Filters	|	name = name_of_the_element		|		name = tripType			|
		|							|	filter = value_of_filter		|		value = oneway			|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|	By link text			|	link = link_text				|		link = REGISTER			|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|	Tag and ID				|	css = tag#id					|		css = input#email		|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|	Tag and Class			| css = tag[attribute e= valie]		|	css=input[name=;astName]	|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		| Tag, Class, Attribute		| css.tag.class[atrribute=value]	|	css = input.inputtext(binder|
		|							|									|			[tabindex = 1])		|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|


FindElement():
	takes in the By object as the parameter and returns an object of type WebElement. The By object in tyrn can be used with various locator stratefies such as ID, Name, Class Name, XPath
	WebElement elementName = driver.findElement(By.LocatorStrategy("LocatorValue"));
		Locator Strategy can be any of the followint: ID, Name, Class Name, Tag Name, Link Text, Partial Link Text, XPATH
	Locator Calue is the unique value ising whivh a web element can be indentifie. It is the reposnsibility of develo[ers and testers to make sure that web elements are uniquely identifiable using certain properties such as ID or name
		Ex.
			WebElement loginlink = driver.findElementt(By.linkText("Login"))
					
	command syntax:
		List<WebElement> elementName = driver.findElements(By.LocatorStrategy("LocatorValue"));
		ex. List <WebElement> listOfElement = driver.findElements(By.xpath("//div"));
		
		_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
		|									|									|
		|			Find Element			|			Find Element			|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|Returns the first most web element	|Retrurns a list of web elements	|
		|if there are multiple web elements	|									|
		|found with the same locator		|									|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|Throws exception NoSuchElementExce-|Returns an empty list it there are |
		|ption if there are no elements 	|no web elements matching the 		|
		|matching the locator strategy		|locator strategy					|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|It will only find one web element	|It will find a collection of 		|
		|									|elements whose match the locator	|
		|									|strategy							|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|Not applicable						|Each Web element is indexed with a |
		|									|number starting from 0 just like an|
		|									|array								|
		|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		
	
		
	get(): 	
		atomatically opens a new browser window and fetches the page that you specify inside the parentheses
		parameter must be a String object

	getTitle():	
		needs no parameters
		fetches the title of the current page
		leading and trailing of white space are trimmed
		returns a null string if the page has no title
				
	getPageSource():
		needs no parameters
		returns the source code of the the page as a string value
		
	getCurrentUrl():
		needs no parameters
		fetches the string representing the current URL that the browser is looking at
		
	getText():
		fetches the inner text of the element that you specify
		
Navigate commands: allow you to refresh, go-into, and switch back and forth between different web pages
	navigate().to():
		automatically opens a new browser window and fetches the page that you specify inside the parentheses
		essentially the same as get()
	
	navigate().refresh():
		needs no parameters
		refreshes the current page
		
	navigate().back():
		needs no parameters
		takes you back by one page on the browser's history
		
	navigate().forward():
		needs no parameters
		takes you forward by one page on the browser's history
		
Closing and Quitting Browser Windows:
	close():
		needs no parameters
		it closes only the browser window that WebDriver is currently controlling
	
	quit():
		needs no parameters
		it closes all windows that WebDriver has opened
		
Waits: there are two kinds of waits
	Implicit Wait
		used to set the default waiting time throughout the program
		usually declared in the stantiation part of the code
		the implicit wait will tell the web driver to wait for a certain amount of time before it will throw a "No Such Element Exception"
		will only need to import one package → import.util.concurrent.TimeUnit;
		on the instation part of code → driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				this means that you are setting 10 seconds as your default wait time
				"10" and "SECONDS" can be changed to any int and time unit
	
	Explicit Wait
		used to set the waiting time for a particular instance only
		are done using the WebDriverWait and ExpectedCondition classes
		in the example: wait up to 10 seconds for an element whose id is "username" to become visible before proceeding to the next command
			import necessary packages → import org.openqa.selenium.support.ui.ExpectedCondition;
										import org.openqa.selenium.support.ui.WebDriverWait;
			Declare a WebDriverWait variable → WebDriverWait myWaitVar = new WebDriverWait(driver, 10);
			Use myWaitVar with ExpectedConditions on portions where you need the explicit wait to occur → myWaitVar.until(ExpectedCondiitions.visibilityOfElementLocated(By.id("username")));
																										  driver.findElement(By.id("username")).sendKeys("tutorial");

Conditions: following methods are used in conditional and looping operations
	isEnabled():
		when you want to verify whether a certian element is enabled or not before executing a command
		ex.
			WebElement txtbox_username = driver.findElement(By.id."username"));
			if(txtbox_username.isEnabled()) {
				txtbox_username.sendKeys("tutorial");
			}
			
	isDisplayed():
		when you want to verify whether a certian element is displayed or not before executing a command
		ex.
			do {
				//do something here
			} while (driver.findElement(By.id("username")).isDisplayed());
			
	isSelected():
		when you want to verify whether a certian check box, radio button, or option in a drop-down box is selected. It does not work on other elements
		ex. 
			//"one-way" and "two-way" are radio buttons
			if (driver.findElement(By.id("one-way")).isSelected()) {
					driver.findElement(By.id("two-way"))click();
			}
			
Using ExpectedConditions:
	The ExpectedConditions class offers a wider set of conditions that you can use in conjunction with WebDriverWait's until() method
	
	alertIsPresent():
		waits until an alert box is displayed
		ex. 
			if (myWaitVar.until(ExpectedCondition.alertIsPresent()) != null) {
				System.out.println("alert is present!");
			}
	
	elementToBeClickable():
		waits until an element is visisble and, at the same time enabled
		example will wait until element with id="username" becomes visible and enabled first before assigning that element as a WebElement variable named "txtUserName"
		ex.
			WebElement txtUserName = myWaitVar.until(ExpectedConditions.elementToBeClickable(By.id("username")));
	
	frameToBeAvailiableAndSwitchToIt():
		waits until the given frame is already availiable, and then automatically switches to it
		ex.
			This will automatically switch to the "viewframe" once it becomes availiable
			myWaitVar.until(ExpectedConditions.framsToBeAvailiableAndSwitchToIt("viewIFRAME"));

Catching Exceptions:
	when usingisEnabled(), isDisplayed(), and isSelected(), WebDriver assumes that the element already exists on the page.
	Else, it will throw a NoSuchElementException.
	To avoid this, use a try-catch block so that the program will not be interrupted
	
	ex.
		WebElement txtbox_username = driver.findelement(By.id("username"));
		try {
			if(txtbox_username.isEnabled()) {
				txtbox_username.sendKeys("tutorial");
			}
		}
		
		catch (NoSuchElementException nsee) {
			System.out.println(nsee.toSrting());
		}
		
	If you use explicit waits, the type od excpetion that you should catch is the "TimeoutException"
		WebDriverWait myWaitVar = new WebDriverWait(driver, 3);
		try {
			myWaitVar.until(ExpectedConditions.visiblityOfElementLocated(By.id("username")));
			driver.findElement(By.id("username")).sendKeys("tutorial");
		} catch (TimeoutException toe) {
			System.out.println(toe.toString());
		}
		

		_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
		|Elements		|Command					|Description												   |
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|				|sendKeys()					|used to enter values onto text boxes						   |
		|Input Box		|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|				|clear()					|used to clear text boxes of its current value				   |
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|Links			|click()					|used to click on the link and wait for page to load complete  |
		|				|							|before proceeding to the next command.						   |
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|Submit Button	|submit()					|															   |
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|Check Box		|click()					|used to toggle the element on/off							   |
		|Radio Button	|							|															   |
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|Drop-down		|selectByVisibleText()		|selects/deselects an option by its displayed text			   |														
		|				|deselectByVisisbleText()	|															   |
		|				|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|				|selectByValue()			|selects/deselects an option by the value of its "value" 	   |
		|				|deselectByIndex)()			|attribute													   |
		|				|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|				|selectByIndex()			|select/deselects an option by its index					   |
		|				|deselectByIndex()			|															   |
		|				|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|				|isMultiple()				|returns TRUE if the rop-down element allows multiple selection|
		|				|							|at a time; FALSE if otherwise								   |
		|				|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		|				|deselectAll()				|deselects all previously selected options					   |
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
		
			WebDriver allows selection of more than one option in a multiple SELECT element
			You can use the submit() method on any element within the form. WebDriver will automatically trigger the submit funtion of the form where that element belongs to
			To control drop-down boxes, you must first import the org.openqa.selenium.support.ui.Select package and then create a Select instanc
			
			
		_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
		|Method			|Description												   								|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|clickAndHold()	|Clicks (without releasing) at the current mouse location									|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|contextClick()	|Performs a context-click at the current mouse location. (Right Click Mouse Action)			|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|doubleClick()	|Performs a double-click at the current mouse location										|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|dragAndDrop	|Performs click-and-hold at the location of the source element, moves to the location of the|
		|(source,target)|location of the target element, then releases the mouse.									|
		|				|Parameters: source - element to emulate button down at										|
		|				|			 target - element to move to and release the mouse at							|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|dragAndDropBy	|Performs click-and-hold at the location of the source element, movws by a given offset,	|	
		|(source, 		|then releases the mouse																	|
		|x-offset,		|Parameters:	source - element to emulate button down at									|
		|y-offset)		|				xOffset - horizontal move offset											|
		|				|				yOffset - vertical move offset												|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|keyDown		|Performs a modifier key press. Does not release the modifier key - subsequent interactions	|
		|(modifier_key)	|may assume it's kept pressed																|
		|				|Parameters: modifier_key - any of the modifier keys (Keys.ALT, Keys.SHIFT, or Keys.CONTROL)|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|keyUp			|Performs a key release																		|
		|(modifier_key)	|Parameters: modifier_key - any of the modifier keys (Keys.ALT, Keys.SHIFT, or Keys.CONTROL)|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|moveByOffset	|Moves the mouse from its current position (or 0,0) by the given offset.					|
		|(x-offset,		|Parameters: x-offset - horizontal offset. A negative value means moving the mouse left		|
		|y-offset)		|			 y-offset - vertical offset. A negative value means moving the mouse down		|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|moveToElement	|Moves the mouse to the middle of the element												|
		|(toElement)	|Parameters: toElement - element to move to													|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|release()		|Releases the depressed left mouse button at the current mouse location						|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		|sendKeys		|Sends a series of keystrokes onto the element												|
		|(onElement,	|Parameters:	onElement - element that will receive the keystrokes, usually a text field	|
		|charsequence)	|				charsequence - any string value representing the sequence of keystrokes to 	|
		|				|								be sent														|
		|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|
		
XPath
	* aka. XML path, it is a syntax or language for finding any element on the web page using XML path expression
	* XPath is used to find the location of any element on a webpage using HTML DOM structure
	
	Xpath = //tagname[@Attribute='Value']
		// → select current node
		tagname → tagname like input, div, img etc → tagname of the particular node
		@ → selects attribute
		attribute → attribute name of the node
		'value' → value of the attribute
		
	Types of X-Path
		1. Absolute XPath
			the direct way to find the element
			disadvantage → if there are any changes made in the path of the element then that XPath gets failed
			key characterstics → it begins with the single forward slash (/), which means you can select the element from the root node
			Ex.
				html/body/div[1]/section/div[1]/div/div/div/div[3]/div[1]/div/h4[1]/b
		2. Relative XPath
			the path starts from the middle of the HTML DOM structure
			it starts with the double forward slash (//), which means it can search the element anywhere at the webpage
			can start from the middle HTML DOM structure and no need to write long xpath
			Ex.
				//*[@class='featured-box']//*text()='Testing']
	XPath axes
		* they search different nodes in XML document from current context node
		* the methods used to find dynamic elements, which otherwise not possible by normal XPath method having no ID, Classname, Name, etc
		* Axes methods are used to find those elements, which dynamically change on refresh or any other operations
		* there are few axes methods commonly used in Selenium Webdriver like child, parent, ancestor, sibling, preceding, self, etc.
	Using XPath Handling complex & Dynamic elements in Selenium
		1. Basic XPath:
			* XPath expression select nodes or list of nodes on the basis of attributes like ID, Name, Classname, etc from the XML document as illustrated below:
				Xpath=//input[@name='uid']
		2. Contains()
			* is a method used in XPath expression
			* used when the value of any attribute changes dynamically, for example, login information
			* the contain feature has an abilityto find the element with partial text as shown below
				ex. 
					complete value of 'Type' is 'submit' but using only partial value 'sub'
						Xpath=//*[contains(@type,'sub')]
					complete value of 'name' is 'btnLogin' but using only partial value 'btn'
						Xpath=//*[contains(@name, 'btn')]
					In the above expression, we have taken the 'name' as an attribute and 'btn' as a partial value as shown in the below screenshot. 
					This will find 2 elements (LOGIN & RESET) as thier 'name' attribute begins with 'btn'
					Similarly, in the below expression, we have taken the 'id' as an attribute and 'message' as a partial value
					This will find 2 elements ('User-ID must not be blank' & 'Password must not be blank') as its 'name' attribute begins with 'message'
						Xpath-//*[contains(@id,'message')]
		3. Using OR & AND:
			in OR expression, two conditions are used, whether 1st condition OR 2nd condition should be true. It is also applicable if any one conditions is true or maybe both. Means any 				one condition is true or maybe both. Means any one condition should be true to find the element
			In the below XPath expression, it identifies the elements whose single or both conditions are true
			XPath=//*[@type='submit' or @name='btnReset']
			Highlighting both elements as "LOGIN" element having attribute 'type' and "RESET" element having attribute 'name'
			In AND expression, two conditions are used, both conditions should be true to find the element. It fails to find element if any one condition is false
				Xpath=//input[@type='submit' and @name='btnLogin']
		4. Start-with function:
			Start-with function finds the element whose attribute value changes on refresh or any operation on the webpage. In this expression, match the starting text of the attribute is 			used to find the element whose attribute changes dynamically. You can also find the element whose attribute value is static (not changes)
				ex. Suppose the ID of particular element changes dynamically like:
					Id = "message12"
					Id = "message345"
					Id = "message8769"
					and so on... but the inital text is same. In this case, we use start-with expression
					In the below expression, there are two elements with an id starting "message" (i.e., 'user-ID must not be blank' & 'Password must not be blank')
					In below example, XPath find those elements whose 'ID' starting with 'message'.
						Xpath=//label[starts-with(@id, 'message')]
		5. Text()
			In this expression, with text function, we find the element with exact text match as shown below. In our case, we find the element with text "UserID"
				Xpath-//td[text()='UserID']
		6. XPath axes methods:
			these xpath axes methods are used to find the complex or dynamic elements. Below we will see some of these methods
			for illustrating these XPath axes methods, we will use the Guru99 bank demo site
			a) Following:
				Selects all elements in the document of the current node() [UserID input box is the current node] as shown in the below screen
					Xpath=//*[@type='text']//following::input
				There are 3 "input" nodes matching by using "following" axis-password, login, and reset button. If you want to focus on any particular element then you can use the below 				XPath method:
					Xpath=//*[@type='text']//following::input[1]
				You can change the XPath according to the requirment by putting [1], [2]... and so on
			b) Ancestor: 
				the ancestor axis selects all ancestors element (gradnparent, parent, etc) of the current node as shwon in the below screen
				in the below expression, we are finding ancestors element of the current ndoe ("ENTERPRISE TESTING" node)
					Xpath=//*[text()='Enterprise Testing']//ancestor::div
			c) Child:
				Selects all child elements of the current node as shown in the below screen
					Xpath=//*[@id='java_technologies']/child::li
			d) Preceding:
				Select all nodes that come from before the current node as shown below in the below screen
				In the below expression, it identifies all the input elements before "LOGIN" button that is Userid and password input element
					Xpath=//*[@type='subnit']//preceding::input
				There are 2 "input" nodes matching by using "preceding" axis. If you want to focus on any particular element then you can use the below XPath:
					Xpath=//*@type='submit']//preceding::input[1]
			e) Following-sibling
				Select the follwoing sibling of the context node. Siblings are on the same level of the current node as shown in the below screen. It will find the element after current node
					xpath=//*[@type='submit']//followign-sibling::input
			f) Parent
				Selects the parent of the current node as shown in the below screen
					Xpath=//*[@id='rt-feature']//parent::div
			g) Self
				Selects the current node or 'self' means that it indicates the node itself as shown in the below screen
				one node matching by using "self" axis. It always finds only one node as it represents self-element
					Xpath=//*[@type='password']//self::input
			h) Descendant
				Selects the descendats of the current node as shown in the below screen
				in the below expression, it identifies all the elements descendats to current element ('Main body surround' frame element) which means down under the node (child node, 				grandchild node, etc)
						Xpath=//*[@id='rt=feature']//descendant::a
Alerts:
	Alert is a small message box which displays on-screen notification to give the user some kind of information or ask for permission to perform certain kind of operation. It may also be 	used for warning purpose
	Alert types:
		1. Simple Alert
			This simple alert displays some information or warning on the screen
		2. Prompt Alert
			This prompt alert asks some input from the user and selenium webdriver can enter the trxt using send keys('input...')
		3. Confirmation Alert
			This confirmation alert asks permission to do some type of operation
How to handle Alert in Selenium Webdriver
	Alert interface provides the below few methods which are widely used in Selenium Webdriver
	1. void dismiss()//to click the 'Cancel' button of the alert
		driver.switchTo().alert().dismiss();
	2. void accept() //to click on the 'OK' button of the alert
		driver.switchTo().alert().getText();
	3. String getText() //To capture the alert message
		driver.switchTo().alert().getText();
	4. void sendKeys(String stringToSend) //to send some data to alert box
		driver.switchTo().alert().sendKeys("Text");
	You can see a number of Alert methods are displayed as shown in below screen suggested by Eclipse
	We can easily switch to alert from the main window by using Selenium's .switchTo() method
	
Dynamic Web Tables
	1. Static tables: Data is static i.e. Number of rows and columns are fixed
	2. Dynamic tables: Data is dynamic i.e. Number of rows and columns are not fixed
	
	Using X-Path to locate web table elements
		web element? 
			Web elements are noting but HTML elements like textbox, dropdowns radio buttons, submit buttons, etc. These HTML elements are written with start tag and ends with an end tag
		
		Steps for getting X-path of web element that we want to locate:
			ex. <p>My First HTML Document</p>
			Steps for getting X-path of web elements that we want to locate
			1. In Chrome, Go to http://demo.guru99.com/test/web-table-element.php
			2. Right click on web element whose x-path is to be fetched. In our case, right click on "Company" Select Inspect option. The following screen will be shown
			3. Right Click on highlighted web element >Select Copy->Copy x-path option
			4. Use the copied X-path "//*[@id="leftcontainer"]/table/thread/tr/th[1]" in Selenium WebDriver to locate the element


For checking the broke links, you will need to fo the following steps:
	1. Collect all the links in the web page based on <a> tag
	2. Send HTTP request for the link and read HTTP response code
	3. Find out whether the link is valid or broken based on HTTP response code
	4. Repeat this for all the links captured

What does TestNG do?
 * Using TestNG you ca generate a proper report, and you can easily come to know how many test cases are passed, failed and skipped
 * You can execute failed test case separately. For example,
 	- Supposed, you have 5 test cases, one method is written for each test case (Assume that the program is written using the main method without usinf testNG). When you run this program first, three methods are executed successfully, and the fourth method is failed. Then correct the errors present in the fourth method, now you want to run only fourth method because first three methods are anyway executed successfully. This is not possible without using TestNG
 * The TestNG provides an option, i.e. testng-failed.xml file in test-output folder. If you want to run only failed test cases means you run this XML file. It will execute only failed test cases
 
 TestNG key features:
 	* Generate the report in a proper format including a number of test cases runs, the number of test cases passed, the number of test cases failed, and the number of test cases failed, 		and the number of test cases skipped
	* Multiple test cases can be grouped more easily by converting them into testng.xml file. In which you can make priorities which test case should be executed first.
	* The same test case can be executed mutiple times without loops just by using keyword called 'invocation count'
	* Using testng, you can execute multiple test cases on multiple browsers, i.e., cross browser testing
	* The testing framework can be easily integrated with tools like Maven, Jenkins, etc
	* Annotations used in the testing are very easy to understand ex. - @BeforeMethod, @AfterMethod, @BeforeTest, @AfterTest
	* WebDriver has no native mechanism for generating reports. TestNG can generate the report in a readable format like the one shown below
	* TestNG simplifies the way the tests are coded. There is no more need for a static main method in our tests. The sequence of actions is regulated by easy-to-understand annotations that do not require methods to be static
	* Uncaught exceptions are automatically handled by TestNG without terminating the test prematurely. These exceptions are reported as failed steps in the report
	* TestNG > JUnit
		- Annotations are easier to understand
		- test cases can be grouped more easily
		- parallel testing in possible
		
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
| 		method		|																										|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @BeforeMethod		| methods under this annotation will be executed prior to each method in each test case					|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @AfterMethod		| methods under this annotation will be executed after each method in each test case					|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @BeforeSuite		| The annotated method will be run before all tests in thsi shuite have run								|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @AfterSuite		| The annotated method will be run after all the tests in this suite have run							|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @BeforeTest		| The annotated method will be run before any test method belonging to the classes inside the tag is run|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @AfterTest		| The annotated method will be run after all the test methods belonging to the classes inside the tag 	|
|					| have run																								|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @BeforeGroups		| The list of groups that this configuration method will run before. This method is guaranteed to run 	|
|					|	shortly before the first test method that belongs to any of these groups is invoked					|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @AfterMethod		| The annotated method will be run before each test method												|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |
| @Test				| The annotated method is a part of a test case															|
|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |